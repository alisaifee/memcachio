name: CI

on: [push, pull_request]

jobs:
  lint:
    name: Lint (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    steps:
    - uses: actions/checkout@v3
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/**') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements/dev.txt
        python setup.py build
    - name: Lint with ruff
      run: |
        ruff check --select I memcachio tests
        ruff check memcachio tests
    - name: Check types
      run: |
        mypy memcachio
  test:
    name: Test (Python ${{ matrix.python-version }}, Memcached ${{ matrix.memcached-version }}${{ matrix.extensions == 'True' && ', compiled' || ''}})
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.memcached-version == 'next' }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13", "pypy-3.11"]
        memcached-version: ["1.6"]
        runtime_type_checks: ["True"]
        extensions: ["False"]
    steps:
    - uses: actions/checkout@v3
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements/**') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements/ci.txt
        python setup.py build
    - name: Compile extensions
      if: ${{ matrix.extensions == 'True' }}
      run: python setup.py build_ext --inplace --use-mypyc
    - name: Tests
      env:
        HOST_OS: linux
        CI: "True"
        MEMCACHIO_MEMCACHED_VERSION: ${{matrix.memcached-version}}
      run: |
        echo "CI: $CI"
        pytest -q --cov=memcachio --cov-report=xml ${{ matrix.test_params }}
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4.2.0
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  # TODO: mypyc isn't working yet.
  #generate_wheels_matrix:
  #  name: Generate wheels matrix
  #  runs-on: ubuntu-latest
  #  outputs:
  #    include: ${{ steps.set-matrix.outputs.include }}
  #  steps:
  #    - uses: actions/checkout@v3
  #      with:
  #        fetch-depth: 0
  #    - name: Install cibuildwheel and pypyp
  #      run: |
  #        pipx install cibuildwheel==2.22.0
  #        pipx install pypyp==1.3
  #    - id: set-matrix
  #      run: |
  #        MATRIX=$(
  #          {
  #            cibuildwheel --print-build-identifiers --platform linux . \
  #            | pyp 'json.dumps({"only": x, "os": "ubuntu-latest"})' \
  #            && cibuildwheel --print-build-identifiers --platform macos . \
  #            | pyp 'json.dumps({"only": x, "os": "macos-latest"})'
  #          } | pyp 'json.dumps(list(map(json.loads, lines)))'
  #        )
  #        echo "include=$MATRIX" | tee -a $GITHUB_OUTPUT
  #      env:
  #        CIBW_ARCHS_LINUX: auto aarch64
  #        CIBW_ARCHS_MACOS: auto arm64
  #        CIBW_SKIP: '*musllinux* pp*'
  #build_wheels:
  #  needs: [generate_wheels_matrix]
  #  name: Build wheel on ${{ matrix.only }}
  #  runs-on: ${{ matrix.os }}
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      include:
  #        ${{ fromJson(needs.generate_wheels_matrix.outputs.include) }}
  #  steps:
  #    - uses: actions/checkout@v3
  #      with:
  #        fetch-depth: 0
  #    - name: Set up QEMU
  #      if: runner.os == 'Linux'
  #      uses: docker/setup-qemu-action@v2
  #    - name: Build wheel
  #      uses: pypa/cibuildwheel@v2.22.0
  #      with:
  #        only: ${{ matrix.only }}
  #      env:
  #        CIBW_BUILD_VERBOSITY: 3
  #        CIBW_BUILD_FRONTEND: "build"
  #        CIBW_CONFIG_SETTINGS: "--build-option=--use-mypyc"
  #        CIBW_TEST_COMMAND: "python -c 'import memcachio'"
  #    - uses: actions/upload-artifact@v4
  #      with:
  #        name: wheels-${{matrix.only}}
  #        path: ./wheelhouse/*.whl
  build_pure_wheel:
    needs: [lint]
    name: Build pure python wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build wheels
        run: |
          python -m pip install build
          PURE_PYTHON=1 python -m build --wheel
      - uses: actions/upload-artifact@v4
        with:
          name: pure_wheels
          path: ./dist/*.whl
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build sdist
        run: |
          pipx run build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: src_dist
          path: dist/*.tar.gz
  upload_pypi:
    needs: [test, build_pure_wheel, build_sdist]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "*wheels*"
          merge-multiple: true
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: src_dist
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true
          verbose: true
  upload_pypi_release:
    needs: [test, build_pure_wheel, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "*wheels*"
          merge-multiple: true
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: src_dist
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    needs: [upload_pypi_release]
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: "*wheels*"
          merge-multiple: true
          path: dist
      - name: Download source dist
        uses: actions/download-artifact@v4
        with:
          name: src_dist
          path: dist
      - name: Generate release notes
        run: |
          ./scripts/github_release_notes.sh > release_notes.md
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          bodyFile: release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}

